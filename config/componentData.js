module.exports = [{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n  // Attribution: Fabi√°n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default EyeIcon;","examples":[{"name":"Example","description":"","code":"import React from \"react\";\r\nimport EyeIcon from \"ps-react-dk/EyeIcon\";\r\n\r\nexport default function EyeIconExample() {\r\n    return <EyeIcon />;\r\n}"}]},{"name":"HelloWorld","description":"HelloWorld Component.","props":{"message":{"type":{"name":"string"},"required":false,"description":"Message to display","defaultValue":{"value":"\"World\"","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** HelloWorld Component. */\r\nfunction HelloWorld({message}) {\r\n    return <div>Hello {message}</div>;\r\n}\r\n\r\nHelloWorld.propTypes = {\r\n    /** Message to display */\r\n    message: PropTypes.string\r\n}\r\n\r\nHelloWorld.defaultProps = {\r\n    message: \"World\"\r\n}\r\n\r\nexport default HelloWorld;","examples":[{"name":"ExampleHelloWorld","description":"Custom message","code":"import React from 'react';\r\nimport HelloWorld from \"ps-react-dk/HelloWorld\";\r\n\r\n/** Custom message */\r\nexport default function ExampleHelloWorld() {\r\n    return <HelloWorld message=\"people!\" />\r\n}"}]},{"name":"Label","description":"Label component","props":{"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true"}},"code":"import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label component */\r\nfunction Label({label, required, htmlFor}) {\r\n    return (\r\n        <label style={{display: \"block\"}} htmlFor={htmlFor} >\r\n            {label} {required && <span style={{color: \"red\"}}> *</span>}\r\n        </label>\r\n    );\r\n}\r\n\r\nLabel.propTypes = {\r\n    /** Label text */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** HTML ID for associated input */\r\n    htmlFor: PropTypes.string.isRequired,\r\n\r\n    /** Display asterisk after label if true */\r\n    required: PropTypes.bool,\r\n};\r\n\r\nexport default Label;","examples":[{"name":"ExampleOptional","description":"Optional Label","code":"import React from 'react'\r\nimport Label from 'ps-react-dk/Label'\r\n\r\n/** Optional Label */\r\nexport default function ExampleOptional() {\r\n    return <Label label=\"This is optional label\" htmlFor=\"example\" />\r\n}"},{"name":"ExampleRequired","description":"Required Label","code":"import React from 'react'\r\nimport Label from 'ps-react-dk/Label'\r\n\r\n/** Required Label */\r\nexport default function ExampleOptional() {\r\n    return <Label label=\"This is required label\" htmlFor=\"example\" required={true} />\r\n}"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nconst PasswordInput = (props) => {\r\n    const { \r\n        htmlId, \r\n        value, \r\n        label, \r\n        error, \r\n        onChange, \r\n        placeholder, \r\n        maxLength, \r\n        showVisibilityToggle, \r\n        quality\r\n    } = props;\r\n    const [showPassword, setShowPassowrd] = useState(false);\r\n\r\n    const toggleShowPassword = event => {\r\n        setShowPassowrd(prevShowPassword => !prevShowPassword);\r\n        if (event) event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <TextInput\r\n          htmlId={htmlId}\r\n          label={label}\r\n          placeholder={placeholder}\r\n          type={showPassword ? 'text' : 'password'}\r\n          onChange={onChange}\r\n          value={value}\r\n          maxLength={maxLength}\r\n          error={error}\r\n          required\r\n          {...props}>\r\n          {\r\n            showVisibilityToggle &&\r\n            <a\r\n              href=\"#\"\r\n              onClick={toggleShowPassword}\r\n              style={{ marginLeft: 5 }}>\r\n              <EyeIcon />\r\n            </a>\r\n          }\r\n          {\r\n            value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n          }\r\n        </TextInput>\r\n      );\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: 'Password'\r\n};\r\n\r\nexport default PasswordInput;\r\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React, { useState } from 'react';\nimport PasswordInput from 'ps-react-dk/PasswordInput';\n\n/** All features enabled */\nconst ExampleAllFeatures = (props) => {\n  const [password, setPassword] = useState(\"\");\n\n  const getQuality = () => {\n    const length = password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  return (\n    <div>\n      <PasswordInput\n        htmlId=\"password-input-example-all-features\"\n        name=\"password\"\n        onChange={event => setPassword(event.target.value)}\n        value={password}\n        minLength={8}\n        placeholder=\"Enter password\"\n        showVisibilityToggle\n        quality={getQuality()}\n        {...props} />\n    </div>\n  );\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"ProgressBar","description":"ProgressBar component","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed."},"width":{"type":{"name":"number"},"required":true,"description":"Bar width."},"height":{"type":{"name":"number"},"required":false,"description":"Bar height.","defaultValue":{"value":"5","computed":false}},"colors":{"type":{"name":"shape","value":{"low":{"name":"string","required":false},"half":{"name":"string","required":false},"full":{"name":"string","required":false}}},"required":false,"description":"","defaultValue":{"value":"{ full: \"green\", half: \"lightgreen\", low: \"red\" }","computed":false}}},"code":"import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/** ProgressBar component */\r\nfunction ProgressBar({\r\n    percent, \r\n    width, \r\n    height = 5,\r\n    colors = {} = { full: \"green\", half: \"lightgreen\", low: \"red\" }}) {\r\n    const getColor = () => {\r\n        return percent === 100\r\n            ? colors.full\r\n            : percent > 50\r\n                ? colors.half\r\n                : colors.low;\r\n    };\r\n\r\n    const getWidthAsPercentOfTotalWidth = () => {\r\n        return parseInt(width * (percent / 100), 10);\r\n    };\r\n\r\n    return (\r\n        <div style={{border: 'solid 1px lightgray', width: width}}>\r\n            <div style={{\r\n                width: getWidthAsPercentOfTotalWidth(),\r\n                height,\r\n                backgroundColor: getColor()\r\n            }}>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nProgressBar.propTypes = {\r\n    /** Percent of progress completed. */\r\n    percent: PropTypes.number.isRequired,\r\n    /** Bar width. */\r\n    width: PropTypes.number.isRequired,\r\n    /** Bar height. */\r\n    height: PropTypes.number,\r\n\r\n    colors: PropTypes.shape({\r\n        low: PropTypes.string,\r\n        half: PropTypes.string,\r\n        full: PropTypes.string\r\n    })\r\n};\r\n\r\nexport default ProgressBar;","examples":[{"name":"Example100Percent","description":"100% progress and height 20px and full color blue","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react-dk/ProgressBar'\r\n\r\n/** 100% progress and height 20px and full color blue */\r\nexport default function Example100Percent() {\r\n    return <ProgressBar percent={100} width={150} height={20} colors={{ full: \"blue\" }} />\r\n}"},{"name":"Example10Percent","description":"10% progress","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react-dk/ProgressBar'\r\n\r\n/** 10% progress */\r\nexport default function Example10Percent() {\r\n    return <ProgressBar percent={10} width={150} />\r\n}"},{"name":"Example60Percent","description":"60% progress","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react-dk/ProgressBar'\r\n\r\n/** 60% progress */\r\nexport default function Example60Percent() {\r\n    return <ProgressBar percent={60} width={150} />\r\n}"}]},{"name":"RegistrationForm","description":"Registration form with built-in validation.","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"Message displayed upon successful submission","defaultValue":{"value":"\"Thanks for registering!\"","computed":false}},"onSubmit":{"type":{"name":"func"},"required":true,"description":"Called when form is submitted"},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"Minimum password length","defaultValue":{"value":"8","computed":false}}},"code":"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextInput from '../TextInput';\r\nimport PasswordInput from '../PasswordInput';\r\n\r\n/** Registration form with built-in validation. */\r\nconst RegistrationForm = (props) => {\r\n    const {\r\n        minPasswordLength,\r\n        confirmationMessage,\r\n        onSubmit\r\n    } = props;\r\n    const [user, setUser] = useState({ email: \"\", password: \"\"});\r\n    const [errors, setErrors] = useState({});\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const onChange = (event) => {\r\n        setUser(currentUser => {\r\n            const user = {...currentUser};\r\n            user[event.target.name] = event.target.value;\r\n            return user;\r\n        });\r\n    };\r\n\r\n    // Returns a number from 0 to 100 that represents password quality.\r\n    // For simplicity, just returning % of min length entered.\r\n    // Could enhance with checks for number, special char, unique characters, etc.\r\n    const passwordQuality = (password) => {\r\n        if (!password) return null;\r\n        if (password.length >= minPasswordLength) return 100;\r\n        const percentOfMinLength = parseInt(password.length/minPasswordLength * 100, 10);\r\n        return percentOfMinLength;\r\n    };\r\n\r\n    const validate = ({email, password}) => {\r\n        const errors = {};\r\n        if (!email) errors.email = 'Email required.';\r\n        if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n\r\n        setErrors(errors);\r\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n        return formIsValid;\r\n    };\r\n\r\n    const onFormSubmit = () => {\r\n        const formIsValid = validate(user);\r\n        if (formIsValid) {\r\n          onSubmit(user);\r\n          setSubmitted(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        submitted \r\n            ? <h2>{confirmationMessage}</h2> \r\n            : <div>\r\n                <TextInput\r\n                  htmlId=\"registration-form-email\"\r\n                  name=\"email\"\r\n                  onChange={onChange}\r\n                  label=\"Email\"\r\n                  value={user.email}\r\n                  error={errors.email}\r\n                  required />\r\n\r\n                <PasswordInput\r\n                  htmlId=\"registration-form-password\"\r\n                  name=\"password\"\r\n                  value={user.password}\r\n                  onChange={onChange}\r\n                  quality={passwordQuality(user.password)}\r\n                  showVisibilityToggle\r\n                  maxLength={50}\r\n                  error={errors.password} />\r\n\r\n                <input type=\"submit\" value=\"Register\" onClick={onFormSubmit} />\r\n            </div>\r\n    );\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Message displayed upon successful submission */\r\n  confirmationMessage: PropTypes.string,\r\n\r\n  /** Called when form is submitted */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Minimum password length */\r\n  minPasswordLength: PropTypes.number\r\n}\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: \"Thanks for registering!\",\r\n  minPasswordLength: 8\r\n};\r\n\r\nexport default RegistrationForm;\r\n","examples":[{"name":"ExampleRegistrationForm","description":"RegistrationForm example","code":"import React from 'react';\nimport RegistrationForm from 'ps-react-dk/RegistrationForm';\n\n/** RegistrationForm example */\nexport default function ExampleRegistrationForm() {\n  return <RegistrationForm onSubmit={(user) => console.log(user)} />\n}"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div style={{marginBottom: 16}}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && {border: 'solid 1px red'}}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;","examples":[{"name":"ExampleError","description":"Error TextInput","code":"import React from 'react';\r\nimport TextInput from \"ps-react-dk/TextInput\";\r\n\r\n/** Error TextInput */\r\nexport default function ExampleError() {\r\n    return (\r\n        <TextInput\r\n            htmlId=\"example-optional\"\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            onChange={() => {}}\r\n            required\r\n            error=\"First name is required.\"\r\n        />\r\n    )\r\n}"},{"name":"ExampleOptional","description":"Optional TextInput","code":"import React from 'react';\r\nimport TextInput from \"ps-react-dk/TextInput\";\r\n\r\n/** Optional TextInput */\r\nexport default function ExampleOptional() {\r\n    return (\r\n        <TextInput\r\n            htmlId=\"example-optional\"\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            onChange={() => {}}\r\n        />\r\n    )\r\n}"}]}]