{"version":3,"sources":["components/Label/Label.js","components/TextInput/TextInput.js","components/ProgressBar/ProgressBar.js","components/PasswordInput/PasswordInput.js","components/EyeIcon/EyeIcon.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example60Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","reportWebVitals.js","index.js"],"names":["Label","label","required","htmlFor","style","display","color","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","props","marginBottom","id","border","className","ProgressBar","percent","width","height","colors","full","half","low","parseInt","backgroundColor","PasswordInput","maxLength","showVisibilityToggle","quality","useState","showPassword","setShowPassowrd","href","onClick","event","prevShowPassword","preventDefault","marginLeft","EyeIcon","length","defaultProps","xmlns","viewBox","transform","fill","d","cx","cy","r","module","exports","EyeIconExample","ExampleOptional","ExampleAllFeatures","password","setPassword","target","minLength","getQuality","Example100Percent","Example10Percent","Example60Percent","ExampleError","HelloWorld","message","ExampleHelloWorld","RegistrationForm","minPasswordLength","confirmationMessage","onSubmit","email","user","setUser","errors","setErrors","submitted","setSubmitted","currentUser","Object","getOwnPropertyNames","validate","ExampleRegistrationForm","console","log","TextInputBEM","TextInputCSSModules","styles","fieldset","inputError","TextInputStyleComponents","Error","styled","div","Input","input","Fieldset","TextInputStyledComponents","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","resolve","Navigation","components","CodeExample","hljs","registerLanguage","javascript","highlightBlock","this","element","ref","React","Component","Example","toggleCode","setState","prevState","showCode","state","example","description","ExampleComponent","require","componentName","default","Props","key","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25294b4a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label component */\r\nfunction Label({label, required, htmlFor}) {\r\n    return (\r\n        <label style={{display: \"block\"}} htmlFor={htmlFor} >\r\n            {label} {required && <span style={{color: \"red\"}}> *</span>}\r\n        </label>\r\n    );\r\n}\r\n\r\nLabel.propTypes = {\r\n    /** Label text */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** HTML ID for associated input */\r\n    htmlFor: PropTypes.string.isRequired,\r\n\r\n    /** Display asterisk after label if true */\r\n    required: PropTypes.bool,\r\n};\r\n\r\nexport default Label;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div style={{marginBottom: 16}}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && {border: 'solid 1px red'}}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/** ProgressBar component */\r\nfunction ProgressBar({\r\n    percent, \r\n    width, \r\n    height = 5,\r\n    colors = {} = { full: \"green\", half: \"lightgreen\", low: \"red\" }}) {\r\n    const getColor = () => {\r\n        return percent === 100\r\n            ? colors.full\r\n            : percent > 50\r\n                ? colors.half\r\n                : colors.low;\r\n    };\r\n\r\n    const getWidthAsPercentOfTotalWidth = () => {\r\n        return parseInt(width * (percent / 100), 10);\r\n    };\r\n\r\n    return (\r\n        <div style={{border: 'solid 1px lightgray', width: width}}>\r\n            <div style={{\r\n                width: getWidthAsPercentOfTotalWidth(),\r\n                height,\r\n                backgroundColor: getColor()\r\n            }}>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nProgressBar.propTypes = {\r\n    /** Percent of progress completed. */\r\n    percent: PropTypes.number.isRequired,\r\n    /** Bar width. */\r\n    width: PropTypes.number.isRequired,\r\n    /** Bar height. */\r\n    height: PropTypes.number,\r\n\r\n    colors: PropTypes.shape({\r\n        low: PropTypes.string,\r\n        half: PropTypes.string,\r\n        full: PropTypes.string\r\n    })\r\n};\r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nconst PasswordInput = (props) => {\r\n    const { \r\n        htmlId, \r\n        value, \r\n        label, \r\n        error, \r\n        onChange, \r\n        placeholder, \r\n        maxLength, \r\n        showVisibilityToggle, \r\n        quality\r\n    } = props;\r\n    const [showPassword, setShowPassowrd] = useState(false);\r\n\r\n    const toggleShowPassword = event => {\r\n        setShowPassowrd(prevShowPassword => !prevShowPassword);\r\n        if (event) event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <TextInput\r\n          htmlId={htmlId}\r\n          label={label}\r\n          placeholder={placeholder}\r\n          type={showPassword ? 'text' : 'password'}\r\n          onChange={onChange}\r\n          value={value}\r\n          maxLength={maxLength}\r\n          error={error}\r\n          required\r\n          {...props}>\r\n          {\r\n            showVisibilityToggle &&\r\n            <a\r\n              href=\"#\"\r\n              onClick={toggleShowPassword}\r\n              style={{ marginLeft: 5 }}>\r\n              <EyeIcon />\r\n            </a>\r\n          }\r\n          {\r\n            value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n          }\r\n        </TextInput>\r\n      );\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: 'Password'\r\n};\r\n\r\nexport default PasswordInput;\r\n","import React from 'react';\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default EyeIcon;","module.exports = [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\r\\n\\r\\n/** SVG Eye Icon */\\r\\nfunction EyeIcon() {\\r\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\r\\n  return (\\r\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\r\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\r\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n      </g>\\r\\n    </svg>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default EyeIcon;\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from \\\"react\\\";\\r\\nimport EyeIcon from \\\"ps-react-dk/EyeIcon\\\";\\r\\n\\r\\nexport default function EyeIconExample() {\\r\\n    return <EyeIcon />;\\r\\n}\"}]},{\"name\":\"HelloWorld\",\"description\":\"HelloWorld Component.\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"\\\"World\\\"\",\"computed\":false}}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** HelloWorld Component. */\\r\\nfunction HelloWorld({message}) {\\r\\n    return <div>Hello {message}</div>;\\r\\n}\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n    /** Message to display */\\r\\n    message: PropTypes.string\\r\\n}\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n    message: \\\"World\\\"\\r\\n}\\r\\n\\r\\nexport default HelloWorld;\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom message\",\"code\":\"import React from 'react';\\r\\nimport HelloWorld from \\\"ps-react-dk/HelloWorld\\\";\\r\\n\\r\\n/** Custom message */\\r\\nexport default function ExampleHelloWorld() {\\r\\n    return <HelloWorld message=\\\"people!\\\" />\\r\\n}\"}]},{\"name\":\"Label\",\"description\":\"Label component\",\"props\":{\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** Label component */\\r\\nfunction Label({label, required, htmlFor}) {\\r\\n    return (\\r\\n        <label style={{display: \\\"block\\\"}} htmlFor={htmlFor} >\\r\\n            {label} {required && <span style={{color: \\\"red\\\"}}> *</span>}\\r\\n        </label>\\r\\n    );\\r\\n}\\r\\n\\r\\nLabel.propTypes = {\\r\\n    /** Label text */\\r\\n    label: PropTypes.string.isRequired,\\r\\n\\r\\n    /** HTML ID for associated input */\\r\\n    htmlFor: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Display asterisk after label if true */\\r\\n    required: PropTypes.bool,\\r\\n};\\r\\n\\r\\nexport default Label;\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional Label\",\"code\":\"import React from 'react'\\r\\nimport Label from 'ps-react-dk/Label'\\r\\n\\r\\n/** Optional Label */\\r\\nexport default function ExampleOptional() {\\r\\n    return <Label label=\\\"This is optional label\\\" htmlFor=\\\"example\\\" />\\r\\n}\"},{\"name\":\"ExampleRequired\",\"description\":\"Required Label\",\"code\":\"import React from 'react'\\r\\nimport Label from 'ps-react-dk/Label'\\r\\n\\r\\n/** Required Label */\\r\\nexport default function ExampleOptional() {\\r\\n    return <Label label=\\\"This is required label\\\" htmlFor=\\\"example\\\" required={true} />\\r\\n}\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React, { useState } from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport ProgressBar from '../ProgressBar';\\r\\nimport EyeIcon from '../EyeIcon';\\r\\nimport TextInput from '../TextInput';\\r\\n\\r\\n/** Password input with integrated label, quality tips, and show password toggle. */\\r\\nconst PasswordInput = (props) => {\\r\\n    const { \\r\\n        htmlId, \\r\\n        value, \\r\\n        label, \\r\\n        error, \\r\\n        onChange, \\r\\n        placeholder, \\r\\n        maxLength, \\r\\n        showVisibilityToggle, \\r\\n        quality\\r\\n    } = props;\\r\\n    const [showPassword, setShowPassowrd] = useState(false);\\r\\n\\r\\n    const toggleShowPassword = event => {\\r\\n        setShowPassowrd(prevShowPassword => !prevShowPassword);\\r\\n        if (event) event.preventDefault();\\r\\n    };\\r\\n\\r\\n    return (\\r\\n        <TextInput\\r\\n          htmlId={htmlId}\\r\\n          label={label}\\r\\n          placeholder={placeholder}\\r\\n          type={showPassword ? 'text' : 'password'}\\r\\n          onChange={onChange}\\r\\n          value={value}\\r\\n          maxLength={maxLength}\\r\\n          error={error}\\r\\n          required\\r\\n          {...props}>\\r\\n          {\\r\\n            showVisibilityToggle &&\\r\\n            <a\\r\\n              href=\\\"#\\\"\\r\\n              onClick={toggleShowPassword}\\r\\n              style={{ marginLeft: 5 }}>\\r\\n              <EyeIcon />\\r\\n            </a>\\r\\n          }\\r\\n          {\\r\\n            value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\r\\n          }\\r\\n        </TextInput>\\r\\n      );\\r\\n}\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Password value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /** Function called when password input value changes */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Max password length accepted */\\r\\n  maxLength: PropTypes.number,\\r\\n\\r\\n  /** Placeholder displayed when no password is entered */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Set to true to show the toggle for displaying the currently entered password */\\r\\n  showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\r\\n  quality: PropTypes.number,\\r\\n\\r\\n  /** Validation error to display */\\r\\n  error: PropTypes.string\\r\\n};\\r\\n\\r\\nPasswordInput.defaultProps = {\\r\\n  maxLength: 50,\\r\\n  showVisibilityToggle: false,\\r\\n  label: 'Password'\\r\\n};\\r\\n\\r\\nexport default PasswordInput;\\r\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React, { useState } from 'react';\\nimport PasswordInput from 'ps-react-dk/PasswordInput';\\n\\n/** All features enabled */\\nconst ExampleAllFeatures = (props) => {\\n  const [password, setPassword] = useState(\\\"\\\");\\n\\n  const getQuality = () => {\\n    const length = password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  return (\\n    <div>\\n      <PasswordInput\\n        htmlId=\\\"password-input-example-all-features\\\"\\n        name=\\\"password\\\"\\n        onChange={event => setPassword(event.target.value)}\\n        value={password}\\n        minLength={8}\\n        placeholder=\\\"Enter password\\\"\\n        showVisibilityToggle\\n        quality={getQuality()}\\n        {...props} />\\n    </div>\\n  );\\n}\\n\\nexport default ExampleAllFeatures;\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"ProgressBar component\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed.\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width.\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height.\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}},\"colors\":{\"type\":{\"name\":\"shape\",\"value\":{\"low\":{\"name\":\"string\",\"required\":false},\"half\":{\"name\":\"string\",\"required\":false},\"full\":{\"name\":\"string\",\"required\":false}}},\"required\":false,\"description\":\"\",\"defaultValue\":{\"value\":\"{ full: \\\"green\\\", half: \\\"lightgreen\\\", low: \\\"red\\\" }\",\"computed\":false}}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** ProgressBar component */\\r\\nfunction ProgressBar({\\r\\n    percent, \\r\\n    width, \\r\\n    height = 5,\\r\\n    colors = {} = { full: \\\"green\\\", half: \\\"lightgreen\\\", low: \\\"red\\\" }}) {\\r\\n    const getColor = () => {\\r\\n        return percent === 100\\r\\n            ? colors.full\\r\\n            : percent > 50\\r\\n                ? colors.half\\r\\n                : colors.low;\\r\\n    };\\r\\n\\r\\n    const getWidthAsPercentOfTotalWidth = () => {\\r\\n        return parseInt(width * (percent / 100), 10);\\r\\n    };\\r\\n\\r\\n    return (\\r\\n        <div style={{border: 'solid 1px lightgray', width: width}}>\\r\\n            <div style={{\\r\\n                width: getWidthAsPercentOfTotalWidth(),\\r\\n                height,\\r\\n                backgroundColor: getColor()\\r\\n            }}>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\n\\r\\nProgressBar.propTypes = {\\r\\n    /** Percent of progress completed. */\\r\\n    percent: PropTypes.number.isRequired,\\r\\n    /** Bar width. */\\r\\n    width: PropTypes.number.isRequired,\\r\\n    /** Bar height. */\\r\\n    height: PropTypes.number,\\r\\n\\r\\n    colors: PropTypes.shape({\\r\\n        low: PropTypes.string,\\r\\n        half: PropTypes.string,\\r\\n        full: PropTypes.string\\r\\n    })\\r\\n};\\r\\n\\r\\nexport default ProgressBar;\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress and height 20px and full color blue\",\"code\":\"import React from 'react'\\r\\nimport ProgressBar from 'ps-react-dk/ProgressBar'\\r\\n\\r\\n/** 100% progress and height 20px and full color blue */\\r\\nexport default function Example100Percent() {\\r\\n    return <ProgressBar percent={100} width={150} height={20} colors={{ full: \\\"blue\\\" }} />\\r\\n}\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react'\\r\\nimport ProgressBar from 'ps-react-dk/ProgressBar'\\r\\n\\r\\n/** 10% progress */\\r\\nexport default function Example10Percent() {\\r\\n    return <ProgressBar percent={10} width={150} />\\r\\n}\"},{\"name\":\"Example60Percent\",\"description\":\"60% progress\",\"code\":\"import React from 'react'\\r\\nimport ProgressBar from 'ps-react-dk/ProgressBar'\\r\\n\\r\\n/** 60% progress */\\r\\nexport default function Example60Percent() {\\r\\n    return <ProgressBar percent={60} width={150} />\\r\\n}\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React, { useState } from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport TextInput from '../TextInput';\\r\\nimport PasswordInput from '../PasswordInput';\\r\\n\\r\\n/** Registration form with built-in validation. */\\r\\nconst RegistrationForm = (props) => {\\r\\n    const {\\r\\n        minPasswordLength,\\r\\n        confirmationMessage,\\r\\n        onSubmit\\r\\n    } = props;\\r\\n    const [user, setUser] = useState({ email: \\\"\\\", password: \\\"\\\"});\\r\\n    const [errors, setErrors] = useState({});\\r\\n    const [submitted, setSubmitted] = useState(false);\\r\\n\\r\\n    const onChange = (event) => {\\r\\n        setUser(currentUser => {\\r\\n            const user = {...currentUser};\\r\\n            user[event.target.name] = event.target.value;\\r\\n            return user;\\r\\n        });\\r\\n    };\\r\\n\\r\\n    // Returns a number from 0 to 100 that represents password quality.\\r\\n    // For simplicity, just returning % of min length entered.\\r\\n    // Could enhance with checks for number, special char, unique characters, etc.\\r\\n    const passwordQuality = (password) => {\\r\\n        if (!password) return null;\\r\\n        if (password.length >= minPasswordLength) return 100;\\r\\n        const percentOfMinLength = parseInt(password.length/minPasswordLength * 100, 10);\\r\\n        return percentOfMinLength;\\r\\n    };\\r\\n\\r\\n    const validate = ({email, password}) => {\\r\\n        const errors = {};\\r\\n        if (!email) errors.email = 'Email required.';\\r\\n        if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\r\\n\\r\\n        setErrors(errors);\\r\\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\r\\n        return formIsValid;\\r\\n    };\\r\\n\\r\\n    const onFormSubmit = () => {\\r\\n        const formIsValid = validate(user);\\r\\n        if (formIsValid) {\\r\\n          onSubmit(user);\\r\\n          setSubmitted(true);\\r\\n        }\\r\\n    };\\r\\n\\r\\n    return (\\r\\n        submitted \\r\\n            ? <h2>{confirmationMessage}</h2> \\r\\n            : <div>\\r\\n                <TextInput\\r\\n                  htmlId=\\\"registration-form-email\\\"\\r\\n                  name=\\\"email\\\"\\r\\n                  onChange={onChange}\\r\\n                  label=\\\"Email\\\"\\r\\n                  value={user.email}\\r\\n                  error={errors.email}\\r\\n                  required />\\r\\n\\r\\n                <PasswordInput\\r\\n                  htmlId=\\\"registration-form-password\\\"\\r\\n                  name=\\\"password\\\"\\r\\n                  value={user.password}\\r\\n                  onChange={onChange}\\r\\n                  quality={passwordQuality(user.password)}\\r\\n                  showVisibilityToggle\\r\\n                  maxLength={50}\\r\\n                  error={errors.password} />\\r\\n\\r\\n                <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={onFormSubmit} />\\r\\n            </div>\\r\\n    );\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n  /** Message displayed upon successful submission */\\r\\n  confirmationMessage: PropTypes.string,\\r\\n\\r\\n  /** Called when form is submitted */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Minimum password length */\\r\\n  minPasswordLength: PropTypes.number\\r\\n}\\r\\n\\r\\nRegistrationForm.defaultProps = {\\r\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\r\\n  minPasswordLength: 8\\r\\n};\\r\\n\\r\\nexport default RegistrationForm;\\r\\n\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"RegistrationForm example\",\"code\":\"import React from 'react';\\nimport RegistrationForm from 'ps-react-dk/RegistrationForm';\\n\\n/** RegistrationForm example */\\nexport default function ExampleRegistrationForm() {\\n  return <RegistrationForm onSubmit={(user) => console.log(user)} />\\n}\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div style={{marginBottom: 16}}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        style={error && {border: 'solid 1px red'}}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Error TextInput\",\"code\":\"import React from 'react';\\r\\nimport TextInput from \\\"ps-react-dk/TextInput\\\";\\r\\n\\r\\n/** Error TextInput */\\r\\nexport default function ExampleError() {\\r\\n    return (\\r\\n        <TextInput\\r\\n            htmlId=\\\"example-optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstname\\\"\\r\\n            onChange={() => {}}\\r\\n            required\\r\\n            error=\\\"First name is required.\\\"\\r\\n        />\\r\\n    )\\r\\n}\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextInput\",\"code\":\"import React from 'react';\\r\\nimport TextInput from \\\"ps-react-dk/TextInput\\\";\\r\\n\\r\\n/** Optional TextInput */\\r\\nexport default function ExampleOptional() {\\r\\n    return (\\r\\n        <TextInput\\r\\n            htmlId=\\\"example-optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstname\\\"\\r\\n            onChange={() => {}}\\r\\n        />\\r\\n    )\\r\\n}\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInputBEM({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div className=\\\"textinput\\\">\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && \\\"textinput__input--state-error\\\"}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInputBEM.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputBEM;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Error TextInput\",\"code\":\"import React from 'react';\\r\\nimport TextInputBEM from \\\"ps-react-dk/TextInputBEM\\\";\\r\\n\\r\\n/** Error TextInput */\\r\\nexport default function ExampleError() {\\r\\n    return (\\r\\n        <TextInputBEM\\r\\n            htmlId=\\\"example-optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstname\\\"\\r\\n            onChange={() => {}}\\r\\n            required\\r\\n            error=\\\"First name is required.\\\"\\r\\n        />\\r\\n    )\\r\\n}\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\nimport styles from \\\"./textInput.css\\\";\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInputCSSModules({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div className={styles.fieldset}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && styles.inputError}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className={styles.error}>{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInputCSSModules.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputCSSModules;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Error TextInput\",\"code\":\"import React from 'react';\\r\\nimport TextInputCSSModules from \\\"ps-react-dk/TextInputCSSModules\\\";\\r\\n\\r\\n/** Error TextInput */\\r\\nexport default function ExampleError() {\\r\\n    return (\\r\\n        <TextInputCSSModules\\r\\n            htmlId=\\\"example-optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstname\\\"\\r\\n            onChange={() => {}}\\r\\n            required\\r\\n            error=\\\"First name is required.\\\"\\r\\n        />\\r\\n    )\\r\\n}\"}]},{\"name\":\"TextInputStyledComponents\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInputStyleComponents({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n    const Error = styled.div`\\r\\n        color: red;\\r\\n    `;\\r\\n    \\r\\n    const Input = styled.input`\\r\\n        border: ${error && \\\"solid 1px red\\\"};\\r\\n        display: block;\\r\\n    `;\\r\\n\\r\\n    const Fieldset = styled.div`\\r\\n        margin-bottom: 16px;\\r\\n    `;\\r\\n\\r\\n    return (\\r\\n      <Fieldset>\\r\\n        <Label htmlFor={htmlId} label={label} required={required} />\\r\\n        <Input\\r\\n          id={htmlId}\\r\\n          type={type}\\r\\n          name={name}\\r\\n          placeholder={placeholder}\\r\\n          value={value}\\r\\n          onChange={onChange}\\r\\n          {...props}/>\\r\\n          {children}\\r\\n        {error && <Error>{error}</Error>}\\r\\n      </Fieldset>\\r\\n    );\\r\\n};\\r\\n\\r\\nTextInputStyleComponents.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputStyleComponents;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Error TextInput\",\"code\":\"import React from 'react';\\r\\nimport TextInputStyledComponents from \\\"ps-react-dk/TextInputStyledComponents\\\";\\r\\n\\r\\n/** Error TextInput */\\r\\nexport default function ExampleError() {\\r\\n    return (\\r\\n        <TextInputStyledComponents\\r\\n            htmlId=\\\"example-optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstname\\\"\\r\\n            onChange={() => {}}\\r\\n            required\\r\\n            error=\\\"First name is required.\\\"\\r\\n        />\\r\\n    )\\r\\n}\"}]}]","import React from \"react\";\r\nimport EyeIcon from \"ps-react-dk/EyeIcon\";\r\n\r\nexport default function EyeIconExample() {\r\n    return <EyeIcon />;\r\n}","import React from 'react'\r\nimport Label from 'ps-react-dk/Label'\r\n\r\n/** Optional Label */\r\nexport default function ExampleOptional() {\r\n    return <Label label=\"This is optional label\" htmlFor=\"example\" />\r\n}","import React from 'react'\r\nimport Label from 'ps-react-dk/Label'\r\n\r\n/** Required Label */\r\nexport default function ExampleOptional() {\r\n    return <Label label=\"This is required label\" htmlFor=\"example\" required={true} />\r\n}","import React, { useState } from 'react';\nimport PasswordInput from 'ps-react-dk/PasswordInput';\n\n/** All features enabled */\nconst ExampleAllFeatures = (props) => {\n  const [password, setPassword] = useState(\"\");\n\n  const getQuality = () => {\n    const length = password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  return (\n    <div>\n      <PasswordInput\n        htmlId=\"password-input-example-all-features\"\n        name=\"password\"\n        onChange={event => setPassword(event.target.value)}\n        value={password}\n        minLength={8}\n        placeholder=\"Enter password\"\n        showVisibilityToggle\n        quality={getQuality()}\n        {...props} />\n    </div>\n  );\n}\n\nexport default ExampleAllFeatures;\n","import React from 'react'\r\nimport ProgressBar from 'ps-react-dk/ProgressBar'\r\n\r\n/** 100% progress and height 20px and full color blue */\r\nexport default function Example100Percent() {\r\n    return <ProgressBar percent={100} width={150} height={20} colors={{ full: \"blue\" }} />\r\n}","import React from 'react'\r\nimport ProgressBar from 'ps-react-dk/ProgressBar'\r\n\r\n/** 10% progress */\r\nexport default function Example10Percent() {\r\n    return <ProgressBar percent={10} width={150} />\r\n}","import React from 'react'\r\nimport ProgressBar from 'ps-react-dk/ProgressBar'\r\n\r\n/** 60% progress */\r\nexport default function Example60Percent() {\r\n    return <ProgressBar percent={60} width={150} />\r\n}","import React from 'react';\r\nimport TextInput from \"ps-react-dk/TextInput\";\r\n\r\n/** Error TextInput */\r\nexport default function ExampleError() {\r\n    return (\r\n        <TextInput\r\n            htmlId=\"example-optional\"\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            onChange={() => {}}\r\n            required\r\n            error=\"First name is required.\"\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport TextInput from \"ps-react-dk/TextInput\";\r\n\r\n/** Optional TextInput */\r\nexport default function ExampleOptional() {\r\n    return (\r\n        <TextInput\r\n            htmlId=\"example-optional\"\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            onChange={() => {}}\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** HelloWorld Component. */\r\nfunction HelloWorld({message}) {\r\n    return <div>Hello {message}</div>;\r\n}\r\n\r\nHelloWorld.propTypes = {\r\n    /** Message to display */\r\n    message: PropTypes.string\r\n}\r\n\r\nHelloWorld.defaultProps = {\r\n    message: \"World\"\r\n}\r\n\r\nexport default HelloWorld;","import React from 'react';\r\nimport HelloWorld from \"ps-react-dk/HelloWorld\";\r\n\r\n/** Custom message */\r\nexport default function ExampleHelloWorld() {\r\n    return <HelloWorld message=\"people!\" />\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextInput from '../TextInput';\r\nimport PasswordInput from '../PasswordInput';\r\n\r\n/** Registration form with built-in validation. */\r\nconst RegistrationForm = (props) => {\r\n    const {\r\n        minPasswordLength,\r\n        confirmationMessage,\r\n        onSubmit\r\n    } = props;\r\n    const [user, setUser] = useState({ email: \"\", password: \"\"});\r\n    const [errors, setErrors] = useState({});\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const onChange = (event) => {\r\n        setUser(currentUser => {\r\n            const user = {...currentUser};\r\n            user[event.target.name] = event.target.value;\r\n            return user;\r\n        });\r\n    };\r\n\r\n    // Returns a number from 0 to 100 that represents password quality.\r\n    // For simplicity, just returning % of min length entered.\r\n    // Could enhance with checks for number, special char, unique characters, etc.\r\n    const passwordQuality = (password) => {\r\n        if (!password) return null;\r\n        if (password.length >= minPasswordLength) return 100;\r\n        const percentOfMinLength = parseInt(password.length/minPasswordLength * 100, 10);\r\n        return percentOfMinLength;\r\n    };\r\n\r\n    const validate = ({email, password}) => {\r\n        const errors = {};\r\n        if (!email) errors.email = 'Email required.';\r\n        if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n\r\n        setErrors(errors);\r\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n        return formIsValid;\r\n    };\r\n\r\n    const onFormSubmit = () => {\r\n        const formIsValid = validate(user);\r\n        if (formIsValid) {\r\n          onSubmit(user);\r\n          setSubmitted(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        submitted \r\n            ? <h2>{confirmationMessage}</h2> \r\n            : <div>\r\n                <TextInput\r\n                  htmlId=\"registration-form-email\"\r\n                  name=\"email\"\r\n                  onChange={onChange}\r\n                  label=\"Email\"\r\n                  value={user.email}\r\n                  error={errors.email}\r\n                  required />\r\n\r\n                <PasswordInput\r\n                  htmlId=\"registration-form-password\"\r\n                  name=\"password\"\r\n                  value={user.password}\r\n                  onChange={onChange}\r\n                  quality={passwordQuality(user.password)}\r\n                  showVisibilityToggle\r\n                  maxLength={50}\r\n                  error={errors.password} />\r\n\r\n                <input type=\"submit\" value=\"Register\" onClick={onFormSubmit} />\r\n            </div>\r\n    );\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Message displayed upon successful submission */\r\n  confirmationMessage: PropTypes.string,\r\n\r\n  /** Called when form is submitted */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Minimum password length */\r\n  minPasswordLength: PropTypes.number\r\n}\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: \"Thanks for registering!\",\r\n  minPasswordLength: 8\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React from 'react';\nimport RegistrationForm from 'ps-react-dk/RegistrationForm';\n\n/** RegistrationForm example */\nexport default function ExampleRegistrationForm() {\n  return <RegistrationForm onSubmit={(user) => console.log(user)} />\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputBEM({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div className=\"textinput\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && \"textinput__input--state-error\"}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className=\"textinput__error\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputBEM.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInputBEM;","import React from 'react';\r\nimport TextInputBEM from \"ps-react-dk/TextInputBEM\";\r\n\r\n/** Error TextInput */\r\nexport default function ExampleError() {\r\n    return (\r\n        <TextInputBEM\r\n            htmlId=\"example-optional\"\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            onChange={() => {}}\r\n            required\r\n            error=\"First name is required.\"\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\nimport styles from \"./textInput.css\";\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputCSSModules({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div className={styles.fieldset}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && styles.inputError}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className={styles.error}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputCSSModules.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInputCSSModules;","import React from 'react';\r\nimport TextInputCSSModules from \"ps-react-dk/TextInputCSSModules\";\r\n\r\n/** Error TextInput */\r\nexport default function ExampleError() {\r\n    return (\r\n        <TextInputCSSModules\r\n            htmlId=\"example-optional\"\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            onChange={() => {}}\r\n            required\r\n            error=\"First name is required.\"\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\nimport styled from \"styled-components\";\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputStyleComponents({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n    const Error = styled.div`\r\n        color: red;\r\n    `;\r\n    \r\n    const Input = styled.input`\r\n        border: ${error && \"solid 1px red\"};\r\n        display: block;\r\n    `;\r\n\r\n    const Fieldset = styled.div`\r\n        margin-bottom: 16px;\r\n    `;\r\n\r\n    return (\r\n      <Fieldset>\r\n        <Label htmlFor={htmlId} label={label} required={required} />\r\n        <Input\r\n          id={htmlId}\r\n          type={type}\r\n          name={name}\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={onChange}\r\n          {...props}/>\r\n          {children}\r\n        {error && <Error>{error}</Error>}\r\n      </Fieldset>\r\n    );\r\n};\r\n\r\nTextInputStyleComponents.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInputStyleComponents;","import React from 'react';\r\nimport TextInputStyledComponents from \"ps-react-dk/TextInputStyledComponents\";\r\n\r\n/** Error TextInput */\r\nexport default function ExampleError() {\r\n    return (\r\n        <TextInputStyledComponents\r\n            htmlId=\"example-optional\"\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            onChange={() => {}}\r\n            required\r\n            error=\"First name is required.\"\r\n        />\r\n    )\r\n}","var map = {\n\t\"./EyeIcon/Example\": 20,\n\t\"./EyeIcon/Example.js\": 20,\n\t\"./HelloWorld/ExampleHelloWorld\": 29,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 29,\n\t\"./Label/ExampleOptional\": 21,\n\t\"./Label/ExampleOptional.js\": 21,\n\t\"./Label/ExampleRequired\": 22,\n\t\"./Label/ExampleRequired.js\": 22,\n\t\"./PasswordInput/ExampleAllFeatures\": 23,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 23,\n\t\"./ProgressBar/Example100Percent\": 24,\n\t\"./ProgressBar/Example100Percent.js\": 24,\n\t\"./ProgressBar/Example10Percent\": 25,\n\t\"./ProgressBar/Example10Percent.js\": 25,\n\t\"./ProgressBar/Example60Percent\": 26,\n\t\"./ProgressBar/Example60Percent.js\": 26,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 30,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 30,\n\t\"./TextInput/ExampleError\": 27,\n\t\"./TextInput/ExampleError.js\": 27,\n\t\"./TextInput/ExampleOptional\": 28,\n\t\"./TextInput/ExampleOptional.js\": 28,\n\t\"./TextInputBEM/ExampleError\": 31,\n\t\"./TextInputBEM/ExampleError.js\": 31,\n\t\"./TextInputCSSModules/ExampleError\": 32,\n\t\"./TextInputCSSModules/ExampleError.js\": 32,\n\t\"./TextInputStyledComponents/ExampleError\": 33,\n\t\"./TextInputStyledComponents/ExampleError.js\": 33\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 43;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Navigation = ({components}) => {\r\n    return (\r\n        <ul className=\"navigation\">\r\n            {\r\n                components.map(name => {\r\n                    return (\r\n                        <li key={name}>\r\n                            <a href={`#${name}`}>{name}</a>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n\r\nNavigation.propTypes = {\r\n    components: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport hljs from 'highlight.js/lib/highlight'\r\nimport javascript from 'highlight.js/lib/languages/javascript'\r\n\r\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\r\n// import Highlight from 'react-highlight';\r\n\r\nclass CodeExample extends React.Component {\r\n  componentDidMount() {\r\n    hljs.registerLanguage('javascript', javascript);\r\n    hljs.highlightBlock(this.element);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre ref={ref => { this.element = ref }}>\r\n        <code>\r\n          {this.props.children}\r\n        </code>\r\n      </pre>\r\n    )\r\n  }\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired\r\n}\r\n\r\nexport default CodeExample;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CodeExample from \"./CodeExample\";\r\n\r\nclass Example extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { showCode: false };\r\n    }\r\n\r\n    toggleCode = event => {\r\n        event.preventDefault();\r\n        this.setState(prevState => {\r\n            return {showCode: !prevState.showCode};\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {showCode} = this.state;\r\n        const {code, description, name} = this.props.example;\r\n\r\n        const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\r\n        return (\r\n            <div className=\"example\">\r\n                {description && <h4>{description}</h4>}\r\n\r\n                <ExampleComponent />\r\n\r\n                <p>\r\n                    <a href=\"#\" onClick={this.toggleCode}>\r\n                        {showCode ? \"Hide\" : \"Show\"} Code\r\n                    </a>\r\n                </p>\r\n\r\n                {showCode && <CodeExample>{code}</CodeExample>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nExample.propTypes = {\r\n    example: PropTypes.object.isRequired,\r\n    componentName: PropTypes.string\r\n};\r\n\r\nexport default Example;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Props = ({props}) => {\r\n    return (\r\n        <table className=\"props\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Description</th>\r\n                    <th>Type</th>\r\n                    <th>Default</th>\r\n                    <th>Required</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    Object.keys(props).map(key => {\r\n                        return (\r\n                            <tr key={key}>\r\n                                <td>{key}</td>\r\n                                <td>{props[key].description}</td>\r\n                                <td>{props[key].type.name}</td>\r\n                                <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\r\n                                <td>{props[key].required && \"X\"}</td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nProps.propTypes = {\r\n    props: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Props;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Example from \"./Example\";\r\nimport Props from \"./Props\";\r\n\r\nconst ComponentPage = ({component}) => {\r\n    const {name, description, props, examples} = component;\r\n\r\n    return (\r\n        <div className=\"componentpage\">\r\n            <h2>{name}</h2>\r\n            <p>{description}</p>\r\n\r\n            <h3>Example{examples.length > 1 && \"s\"}</h3>\r\n            {\r\n                examples.length > 0 \r\n                    ? examples.map(example => <Example key={example.code} example={example} componentName={name} />)\r\n                    : \"No examples exist.\"\r\n            }\r\n\r\n            <h3>Props</h3>\r\n            {\r\n                props\r\n                    ? <Props props={props} />\r\n                    : \"This component accepts no props.\"\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nComponentPage.propTypes = {\r\n    component: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ComponentPage;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport ComponentPage from './ComponentPage';\r\nimport componentData from \"../../config/componentData\";\r\n\r\nexport default class Docs extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            route: window.location.hash.substr(1)\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('hashchange', () => {\r\n            this.setState({route: window.location.hash.substr(1)});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {route} = this.state;\r\n        const component = route ? componentData.filter(component => component.name === route)[0] : componentData[0];\r\n\r\n        return (\r\n            <div>\r\n                <Navigation components={componentData.map(component => component.name)} />\r\n                {\r\n                    typeof component === \"string\"\r\n                        ? <div>component</div>\r\n                        : <ComponentPage component={component} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport reportWebVitals from './reportWebVitals';\nimport \"../node_modules/highlight.js/styles/ocean.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}